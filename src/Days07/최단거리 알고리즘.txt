최단거리 알고리즘

1. 벨만-포드 알고리즘

음수경로를 사용하는 경우에는 벨만-포드 알고리즘을 사용하여야 한다.

- 최대 V-1개의 간선을 지나간다.
- 음수간선이 있어도 최단거리를 구할 수 있다.
- 간선리스트를 사용한다.
- 음의 사이클이 발생하는지 확인이 가능하다.
- 총 연산횟수는 O(VE)이다. V는 정점, E는 간선

for( 1 ~ V-1 )
    for( 1 ~ E )
        선택되는 간선을 이용해서 최단거리 갱신하기.


for( 1 ~ E )
    새롭게 갱신되는 정점이 있다면, 음의 싸이클이 존재하는 것.



2. 다익스트라 알고리즘

매 정점마다 인접 정점과의 거리를 구해서 우선순위 큐에 삽입한다.

우선순위 큐는 거리가 최소 값인 것을 우선순위로 갖는다.
예를 들면, 정점 7까지의 최단거리가 12일 때, 새로 구해진 정점 7까지의 최단거리가 8이라면, 우선순위 큐에서 {7,12}가 꺼내졌을 때, skip한다.
최단거리가 더 작은 값을 만나 갱신이 되었다면, 높은 값은 무시된다.



3. 플로이드 - 워셜 알고리즘

어떤 두 정점 A와 B사이의 최단 경로는 A-B 또는 A-K-B이다.
( 경유지를 거치거나 / 아니거나 )

만약, 경유지를 거치는 경로가 최단경로가 된다면 ? A-K , K-B 역시 각각 최단 경로이다.

- 순환이 없다면, 음수 가중치가 가능하다.
- 기본적으로 동적계획법으로 접근한다.
- 모든 가능한 경유지에 대해서 모든 정점에서 모든 정점으로 가는 최단거리를 확인
  => 연산횟수는 V^3, 시간복잡도는 O(V^3)이다.

- 모든 정점을 모두 확인을 하기 때문에, 주로 인접행렬을 사용한다.