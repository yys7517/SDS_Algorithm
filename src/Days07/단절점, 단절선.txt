
1. 단절점

- 하나의 컴포넌트로 이루어진 무방향 그래프에서 두 개 이상의 컴포넌트(그래프)로 나눌 수 있는 그러한 정점을 '단절점'이라고 한다.
- 단절점을 기준으로, 그래프는 여러 개의 컴포넌트로 분리된다.


* 단절점을 구하는 방법

- 가장 Naive하게 찾아 볼 수 있는 방법은 모든 정점을 한번씩 선택하여(V) 제거한 후 그래프가 나뉘어지는지 파악해보는 방법이 있다(V + E).
  따라서 시간 복잡도는 O(V * (V + E))가 된다. ( 출처: https://www.crocus.co.kr/1164 [Crocus] )

이러한 시간복잡도는 매우 비 효율적이다. ==> 단절점을 빠르게 구하는 방법 ?

* 단절점의 특성 - 단절점에 바로 인접해있는 정점들의 쌍은 단절점이 없으면 우회로로 인해 연결되어있지 않아야 한다.
* 단절점을 빠르게 구하는 방법 ==> DFS

- DFS를 이용하여 정점의 방문순서를 기록한다. (order)
- 특정 정점 A에서 자식들이 특정 정점 A를 지나지 않고 A보다 빠른 방문순서(order)를 가진 정점으로 갈 수 없다면, A는 단절점이 된다.


* 루트노드로 잡은 특정 정점의 자식 수가 2개 이상이면 무조건 단절점이다.

* 정점 A가 루트라면, A의 자식이 2개 이상이면 단절점이다.
* 정점 A가 루트가 아니라면, 자식들이 A 정점을 거치지 않고 빠른 방문순서를 가진 정점으로 갈 수 없다면, 단절점이다.


2. 단절선

- 단절점과 유사하게 단절선은 그래프가 두 개 또는 그 이상으로 나누어지게 하는 간선을 말한다.
- 단절점과 같이 DFS를 이용.
- A 정점에서 부모로 가는 간선이 아닌 간선 중
  아직 방문안한 노드의 discover 번호가 현재 discover 번호보다 클 경우 단절선이 된다.

  출처: https://www.crocus.co.kr/1164 [Crocus]



3. 트리에서의 단절점과 단절선

트리에서의 단절점과 단절선에 대해 살펴보기 이전에, 트리의 특성을 먼저 살펴보자.

- 모든 노드가 연결되어 있으며, 사이클이 없다.
- 계층 구조를 가진다.

* 단절점 ?
1. 자식의 개수가 2개 이상인가 ? == 연결된 정점이 2개 이상인가 ?
       1. 루트노드, 리프노드를 지우는 경우
            * 루트노드 - 루트노드의 경우, 자식의 개수가 2개 이상이 된다면, 트리는 2개 이상의 컴포넌트로 분리된다 => 단절점이 된다. O
            * 리프노드 - 리프노드의 경우, 자식의 개수가 0개이지만, 연결된 정점은 무조건 1개가 될 것이다. (리프노드의 부모) => 단절점이 될 수 없다. X

       2. 루트노드, 리프노드가 아닌 노드를 지우는 경우
            * 루트노드와 리프노드가 아닌 다른 노드의 경우, 무조건 연결된 정점이 2개 이상이 된다.
            Why ? ==> 자신의 부모가 있을 것이고, 리프노드가 아니므로, 자식 노드가 존재할 것이다. 따라서 루트노드, 리프노드를 제외한 노드는 단절점이 된다. O


2. 단절점의 인접 정점들이, 단절점을 지나지 않고, 단절점보다 앞서 방문된 정점으로 갈 수 있는 경로가 존재하는가 ?
    트리의 특징을 살펴보면, 트리는 계층구조를 가진다. 따라서 어떤 노드를 삭제했을 경우, 단절점의 인접 정점들은 단절점을 지나서 앞선 노드를 방문할 수 없다.
    * 조금만 머리로 생각해보거나, 종이에 트리를 그려보면 도움이 될 것이다.
    * 여기서 앞선 노드의 경우, DFS 탐색을 했을 때, 단절점보다 이전에 방문되는 노드를 말한다.


* 단절선 ?
이와 같은 트리의 특징을 통해서, 트리에서 모든 간선은 '단절선'이 되는 것을 알 수 있다.
모든 노드가 연결되어 있고, 사이클이 없으므로, 어떠한 간선이 지워지게 된다면, 트리는 2개 이상의 컴포넌트로 분리될 것이다.

